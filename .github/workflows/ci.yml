name: CI (lint, tests, sandbox deploy)

on:
  pull_request:
  push:
    branches:
      - main
      - 'feature/**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # optional: ruff for linting
          pip install ruff

      - name: Lint (ruff)
        run: ruff check .

      - name: Install Playwright browsers
        run: python -m playwright install --with-deps

      - name: Run tests (pytest + Playwright)
        env:
          FLASK_ENV: testing
        run: |
          pytest -q

  deploy-sandbox:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/feature/')
    needs: test
    runs-on: ubuntu-latest
    environment: sandbox
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Configure AWS via OIDC (recommended)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_SANDBOX_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Deploy static assets to sandbox S3 (optional)
      - name: Sync static/ to S3 sandbox
        run: |
          aws s3 sync static/ s3://${{ secrets.S3_SANDBOX_BUCKET }}/static --delete

      # Deploy Flask app to a staging EC2 via SSH (simple approach)
      - name: SSH to staging EC2 and deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_EC2_HOST }}
          username: ${{ secrets.STAGING_EC2_USER }}
          key: ${{ secrets.STAGING_EC2_SSH_KEY }}
          script: |
            set -e
            cd ${{ secrets.STAGING_APP_DIR }}
            # Pull branch code (ensure the instance has a deploy key or uses HTTPS + token)
            git fetch origin ${{ github.ref_name }}
            git checkout ${{ github.ref_name }}
            git reset --hard origin/${{ github.ref_name }}
            python3 -m venv venv || true
            source venv/bin/activate
            pip install -r requirements.txt
            sudo systemctl restart ${{ secrets.STAGING_SERVICE_NAME }}
            